# Default values for featurehub.
# This is a YAML-formatted file.

nameOverride: ""
fullnameOverride: ""

managementRepository:
  enabled: true

  replicaCount: 1

  image:
    repository: featurehub/mr
    tag: 1.5.6

  pullPolicy: IfNotPresent

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # -- Environment variables to be exposed to management-repository deployment.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case.
  # Entries accepted here are the same as would be specified in /etc/app-config/applications.properties.
  # Note that `server.port` and `monitor.port` use their default values of `8085` and `8701` respectively, to make
  # it easier to implement the deployment, service and the prometheus serviceMonitor manifests.
  environmentVars:
    db.url: jdbc:postgresql://featurehub-postgresql:5432/featurehub
    db.username: featurehub
    db.connections: "3"
    run.nginx: "true"
    server.gracePeriodInSeconds: "10"
    register.url: http://localhost/register-url?token=%s
    portfolio.admin.group.suffix: Administrators

  # -- Name of the secret containing secret properties, to be exposed as environment variables to
  # management-repository deployment. Create the secret in advance, then reference it here.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case
  # Entries of the secret specified here are the same as would be specified in /etc/app-config/secrets.properties
  # E.g `db.password: suP€rSeCr€tP4$s`
  envFromSecret: ""
 
  # -- Prometheus configuration 
  prometheus:
    # -- Whether to enable or disable prometheus metrics endpoints, and serviceMonitor
    # If enabled, metrics are exposed on port 8701, on /metrics endpoint
    enabled: false
    # -- Labels for the Prometheus Operator to handle the serviceMonitor
    labels: {}

  ingress:
    enabled: true
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
      #  - host: chart-example.local
      #    paths:
      #      - path: /
      #        pathType: ImplementationSpecific
    tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  imagePullSecrets: []
  
  podAnnotations: {}
  
  podSecurityContext:
    fsGroup: 999
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true

edge:
  enabled: true

  replicaCount: 2

  image:
    repository: featurehub/edge
    tag: 1.5.6

  pullPolicy: IfNotPresent

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # -- Environment variables to be exposed to edge deployment.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case.
  # Entries accepted here are the same as would be specified in /etc/app-config/applications.properties.
  # Note that `server.port` and `monitor.port` use their default values of `8085` and `8701` respectively, to make
  # it easier to implement the deployment, service and the prometheus serviceMonitor manifests.
  environmentVars:
    maxSlots: "30"
    update.pool-size: "30" 
    listen.pool-size: "30"
    server.gracePeriodInSeconds: "10"
    dacha.url.default: http://featurehub-dacha

  # -- Name of the secret containing secret properties, to be exposed as environment variables to
  # edge deployment. Create the secret in advance, then reference it here.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case
  # Entries of the secret specified here are the same as would be specified in /etc/app-config/secrets.properties
  envFromSecret: ""

  # -- Prometheus configuration 
  prometheus:
    # -- Whether to enable or disable prometheus metrics endpoints, and serviceMonitor
    # If enabled, metrics are exposed on port 8701, on /metrics endpoint
    enabled: false
    # -- Labels for the Prometheus Operator to handle the serviceMonitor
    labels: {}

  ingress:
    enabled: true
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
      #  - host: chart-example.local
      #    paths:
      #      - path: /features
      #        pathType: ImplementationSpecific
    tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  imagePullSecrets: []
  
  podAnnotations: {}
  
  podSecurityContext:
    fsGroup: 999
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true

dacha:
  enabled: true

  replicaCount: 2

  image:
    repository: featurehub/dacha
    tag: 1.5.6

  pullPolicy: IfNotPresent

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # -- Environment variables to be exposed to dacha deployment.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case.
  # Entries accepted here are the same as would be specified in /etc/app-config/applications.properties.
  # Note that `server.port` and `monitor.port` use their default values of `8085` and `8701` respectively, to make
  # it easier to implement the deployment, service and the prometheus serviceMonitor manifests.
  environmentVars:
    cache.pool-size: 10

  # -- Name of the secret containing secret properties, to be exposed as environment variables to
  # dacha deployment. Create the secret in advance, then reference it here.
  # As of 1.5.0 all FeatureHub controller properties are available as environment variables using the same case
  # Entries of the secret specified here are the same as would be specified in /etc/app-config/secrets.properties
  envFromSecret: ""

  # -- Prometheus configuration 
  prometheus:
    # -- Whether to enable or disable prometheus metrics endpoints, and serviceMonitor
    # If enabled, metrics are exposed on port 8701, on /metrics endpoint
    enabled: false
    # -- Labels for the Prometheus Operator to handle the serviceMonitor
    labels: {}

  ingress:
    enabled: true
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
      #  - host: chart-example.local
      #    paths:
      #      - path: /
      #        pathType: ImplementationSpecific
    tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

  imagePullSecrets: []
  
  podAnnotations: {}
  
  podSecurityContext:
    fsGroup: 999
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true

# ------------------------------------------------------------------------------- #
# NATS Helm Chart from Bitnami
# Documentation: https://github.com/nats-io/k8s/tree/main/helm/charts/nats
# ------------------------------------------------------------------------------- #
nats:
  enabled: false
  urls: nats://featurehub-nats:4222
  cluster:
    enabled: true
    name: featurehub
    replicas: 3
  topologyKeys:
    - "kubernetes.io/hostname"
    - "topology.kubernetes.io/zone"
    - "topology.kubernetes.io/region"

# ------------------------------------------------------------------------------- #
# PostgreSQL Helm Chart from Bitnami:
# Documentation: https://github.com/bitnami/charts/tree/master/bitnami/postgresql
# ------------------------------------------------------------------------------- #
postgresql:
  enabled: false
  global:
    postgresql:
      auth:
        postgresPassword: postgresql
  primary:
    persistence:
      enabled: true
      storageClassName: standard
      accessModes:
        - ReadWriteOnce
      size: 128Mi
    initdb:
      scripts:
        # strongly recommended ensuring that the values in this init script
        # match the ones set in .Values.db
        featurehub.sql:
          CREATE USER featurehub PASSWORD 'featurehub';
          CREATE DATABASE featurehub;
          GRANT ALL PRIVILEGES ON DATABASE featurehub TO featurehub;

